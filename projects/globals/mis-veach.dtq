TEXTURESSTART
TEXTURESEND
MATERIALSSTART
{
  
  "materials": [
    {
      "albedo":       "[0.7, 0.6, 0.4]",
      "diffuse":      "1.0",
      "specular":     "0.0",
      "glossy":       "0.0",
      "glossy_lobe":  "0.95",
      "transmittive": "0.0",
      "roughness":    "0.6",
      "metallic":     "0.2",
      "fresnel":      "0.9",
      "subsurface":   "0.0",
      "anisotropic":  "0.8"
    },
    {
      "albedo":       "[0.2, 0.1, 0.4]",
      "diffuse":      "0.0",
      "specular":     "1.0",
      "glossy":       "0.0",
      "glossy_lobe":  "0.9",
      "transmittive": "0.0",
      "roughness":    "0.8",
      "metallic":     "0.2",
      "fresnel":      "0.8",
      "subsurface":   "0.1",
      "anisotropic":  "0.3"
    },
    {
      "albedo":       "[0.65, 0.55, 0.42]",
      "diffuse":      "0.8",
      "specular":     "0.0",
      "glossy":       "0.2",
      "glossy_lobe":  "0.6",
      "transmittive": "0.0",
      "roughness":    "0.912",
      "metallic":     "0.0",
      "fresnel":      "0.882",
      "subsurface":   "0.25",
      "anisotropic":  "0.706"
    }
  ]
}
MATERIALSEND

CAMERASTART
void Update_Camera ( Camera* camera, float time ) {
  // if ( camera->flags > 0 ) return;

  // camera->position = (float3)(0.0f);
  // camera->lookat   = (float3)(cos(time*0.5f), sin(time*0.5f), cos(time)*0.1f);
}
CAMERAEND

EMITTERSTART
__constant int EMITTER_AMT = 1;
Emitter REmission ( int index, float3 dval, float time ) {
  float f = (float)(index+1);
  float3 origin = (float3)(0.6f+sin(time)*0.3f);
  if ( index == 0 ) // most light
    return (Emitter){origin, (float3)(0.0f)+dval.x, 0.0f+dval.y};
  if ( index == 1 ) // bg light
    return (Emitter){(float3)( 0.6f, 0.0f,-0.6f), (float3)(1.00f)*cos(time), 0.1f};
}
EMITTEREND

UPDATEMAPSTART
void Room ( int avoid, float3 origin, SampledPt* pt, float time, float3 dval ) {
  float dist;
  float3 colour = (float3)(1.0f);
  dist = sdPlane(origin, normalize((float3)(0.0f, 0.0f, 1.0f)), 1.5f);
  colour = (float3)(sin(origin.x*PI*5.0f)*sin(origin.y*PI*5.0f) >= 0.0f) + 0.5f;
  colour *= (float3)(1.0f, 0.0f, 0.0f);
  MapUnionG(avoid, pt, dist, 0, colour);
  dist = sdPlane(origin, normalize((float3)(0.0f, 0.0f, -1.0f)), 1.5f);
  MapUnionG(avoid, pt, dist, 0, colour);
  colour = (float3)(sin(origin.z*PI*5.0f)*sin(origin.y*PI*5.0f) >= 0.0f) + 0.5f;
  colour *= (float3)(0.0f, 0.0f, 1.0f);
  dist = sdPlane(origin, normalize((float3)(-1.0f, 0.0f, 0.0f)), 1.5f);
  MapUnionG(avoid, pt, dist, 0, colour);
  dist = sdPlane(origin, normalize((float3)(1.0f, 0.0f, 0.0f)), 1.5f);
  MapUnionG(avoid, pt, dist, 0, colour);
  colour = (float3)(sin(origin.x*PI*5.0f)*sin(origin.z*PI*5.0f) >= 0.0f) + 0.5f;
  colour *= (float3)(0.0f, 1.0f, 0.0f);
  dist = sdPlane(origin, normalize((float3)(0.0f, -1.0f, 0.0f)), 10.5f);
  MapUnionG(avoid, pt, dist, 0, colour);
  dist = sdPlane(origin, normalize((float3)(0.0f, 1.0f, 0.0f)), 1.5f);
  MapUnionG(avoid, pt, dist, 0, colour);
}

void Panels ( int avoid, float3 origin, SampledPt* pt, float3 dval, float time){

  // meta balls

  
  // weird thing
  float dist, dist2;
  origin += 0.5f*(float3)(cos(time), sin(time), sin(time));
  dist  = sdHexagonCircumcircle(origin, (float2)(0.096f, 0.032f));
  dist2 = sdHexagonCircumcircle(origin, (float2)(0.078f, 0.151f));
  dist = opUnionChamfer(dist, dist2, 0.073f)*0.5f;
  MapUnionG(avoid, pt, dist, 1, (float3)(0.4f, 0.6f, 0.2f));
}
void Hider ( int avoid, float3 origin, SampledPt* pt, float3 dval, float time){
  // hide light
  origin += (float3)(0.3f);
  origin.xz = opRotate(origin.xz, sin(time));
  float dist = sdBox(origin, (float3)(0.196f, 0.16f, 0.123f));
  MapUnionG(avoid, pt, dist, 1, (float3)(1.0f));
}
void BSDFModel ( int avoid, float3 O, SampledPt* pt, float3 dval, float time){
  float dist = sdBox(O, (float3)(0.1f))*0.5f;
  dist += sin(O.x*2.0f)*0.1f + cos(O.z*128.0f)*0.001f;
  MapUnionG(avoid, pt, dist, 2, (float3)(-1.0f));
}

void Update_Map ( int avoid, float3 origin, SampledPt* pt, float time,
                  __read_only image2d_array_t textures, float3 dval ) {
  Room(avoid, origin, pt, time, dval);
  Panels(avoid, origin, pt, dval, time);
  Hider(avoid, origin, pt, dval, time);
  BSDFModel(avoid, origin, pt, dval, time);
}
UPDATEMAPEND
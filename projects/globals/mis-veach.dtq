TEXTURESSTART
TEXTURESEND
MATERIALSSTART
{
  
  "materials": [
    {
      "albedo":            "[0.7, 0.6, 0.4]",
      "pdf_diffuse":       "1.0",
      "pdf_specular":      "0.0",
      "pdf_glossy":        "0.0",
      "pdf_glossy_lobe":   "0.0",
      "pdf_transmittive":  "0.0",
      "pdf_ior":           "0.0",
      "pbr_roughness":     "0.0",
      "pbr_metallic":      "0.0",
      "pbr_fresnel":       "0.0",
      "d_subsurface":      "0.0",
      "d_specular_tint":   "0.0",
      "d_anisotropic":     "0.0",
      "d_sheen":           "0.0",
      "d_sheen_tint":      "0.0",
      "d_clearcoat":       "0.0",
      "d_clearcoat_gloss": "0.0",
      "d_specular":        "0.4"
    },
    {
      "albedo":            "[0.2, 0.6, 0.4]",
      "pdf_diffuse":       "1.0",
      "pdf_specular":      "0.0",
      "pdf_glossy":        "0.0",
      "pdf_glossy_lobe":   "0.0",
      "pdf_transmittive":  "0.0",
      "pdf_ior":           "0.0",
      "pbr_roughness":     "0.0",
      "pbr_metallic":      "0.0",
      "pbr_fresnel":       "0.0",
      "d_subsurface":      "0.0",
      "d_specular_tint":   "0.0",
      "d_anisotropic":     "0.0",
      "d_sheen":           "0.0",
      "d_sheen_tint":      "0.0",
      "d_clearcoat":       "0.0",
      "d_clearcoat_gloss": "0.0",
      "d_specular":        "0.4"
    }
  ]
}
MATERIALSEND

CAMERASTART
void Update_Camera ( Camera* camera, float time ) {
  if ( camera->flags > 0 ) return;
}
CAMERAEND

EMITTERSTART
__constant int EMITTER_AMT = 1;
Emitter REmission ( int index, float3 dval, float time ) {
  float f = (float)(index+1);
  float3 origin = (float3)(0.0f);
  origin.x += (sin(time*0.2f))*0.8f;
  origin.z -= (sin(time*0.01f + f*23.23f))*0.8f;
  origin.y -= (cos(time + f*52345.02342f))*0.8f;
  if ( index == 0 ) // most light
    return (Emitter){origin, (float3)(1.005f)+dval.x, 0.1f+dval.y};
  if ( index == 1 ) // bg light
    return (Emitter){(float3)( 0.6f, 0.0f,-0.6f), (float3)(1.00f)*cos(time), 0.1f};
}
EMITTEREND

UPDATEMAPSTART
void Room ( int avoid, float3 origin, SampledPt* pt, float time, float3 dval ) {
  float dist;
  dist = sdPlane(origin, normalize((float3)(0.0f, 0.0f, 1.0f)), 1.0f);
  MapUnionG(avoid, pt, dist, 0, (float3)(0.2f, 0.3f, 0.9f));
  dist = sdPlane(origin, normalize((float3)(0.0f, 1.0f, 0.0f)), 1.0f);
  MapUnionG(avoid, pt, dist, 0, (float3)(0.2f, 0.3f, 0.2f));
  dist = sdPlane(origin, normalize((float3)(0.0f, 0.0f, -1.0f)), 1.0f);
  MapUnionG(avoid, pt, dist, 0, (float3)(0.2f, 0.9f, 0.2f));
  dist = sdPlane(origin, normalize((float3)(0.0f, -1.0f, 0.0f)), 1.0f);
  MapUnionG(avoid, pt, dist, 0, (float3)(0.9f, 0.3f, 0.2f));
  dist = sdPlane(origin, normalize((float3)(1.0f, 0.0f, 0.0f)), 1.0f);
  MapUnionG(avoid, pt, dist, 0, (float3)(0.2f, 0.9f, 0.9f));
  dist = sdPlane(origin, normalize((float3)(-1.0f, 0.0f, 0.0f)), 1.0f);
  MapUnionG(avoid, pt, dist, 0, (float3)(0.9f, 0.9f, 0.2f));

}

void Panels ( int avoid, float3 origin, SampledPt* pt, float3 dval, float time){

  // meta balls

  
  // weird thing
  float dist, dist2;
  origin += 0.5f*(float3)(cos(time), sin(time), sin(time));
  dist  = sdHexagonCircumcircle(origin, (float2)(0.096f, 0.032f));
  dist2 = sdHexagonCircumcircle(origin, (float2)(0.078f, 0.151f));
  dist = opUnionChamfer(dist, dist2, 0.073f);
  MapUnionG(avoid, pt, dist, 1, (float3)(0.4f, 0.6f, 0.2f));
}
void Hider ( int avoid, float3 origin, SampledPt* pt, float3 dval, float time){
  // hide light
  origin += (float3)((sin(time*0.2f))*0.3f,
                     (cos(time*0.5f))*0.6f,
                     sin(time*0.01f)*0.1f);
  float dist = sdBox(origin, (float3)(0.396f, 0.36f, 0.023f));
  MapUnionG(avoid, pt, dist, 1, (float3)(0.4f, 0.6f, 0.2f));
}
void BSDFModel ( int avoid, float3 origin, SampledPt* pt, float3 dval, float time){
  float dist = sdSphere(origin-(float3)(0.3f), 0.1f);
  MapUnionG(avoid, pt, dist, 1, (float3)(0.4f, 0.6f, 0.2f));
}

void Update_Map ( int avoid, float3 origin, SampledPt* pt, float time,
                  __read_only image2d_array_t textures, float3 dval ) {
  Room(avoid, origin, pt, time, dval);
  Panels(avoid, origin, pt, dval, time);
  Hider(avoid, origin, pt, dval, time);
  BSDFModel(avoid, origin, pt, dval, time);
}
UPDATEMAPEND
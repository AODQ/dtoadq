TEXTURESSTART
TEXTURESEND
MATERIALSSTART
{
  "materials": [
    {
      "diffuse": "1.0",
      "specular": "0.0",
      "glossy": "0.4",
      "retroreflective": "0.0",
      "transmittive": "0.0"
    },
    {
      "diffuse": "1.0",
      "specular": "0.0",
      "glossy": "0.0",
      "retroreflective": "0.0",
      "transmittive": "0.0"
    }
  ]
}
MATERIALSEND

CAMERASTART
void Update_Camera ( Camera* camera, float time ) {
  if ( camera->flags > 0 ) return;
}
CAMERAEND

EMITTERSTART
__constant int EMITTER_AMT = 1;
Emitter REmission ( int index, float3 dval, float time ) {
  float f = (float)(index+1);
  float3 origin = (float3)(-0.95f, 0.55f, 0.95f);
  origin.x += fabs(sin(time));
  origin.z -= fabs(sin(time));
  if ( index == 0 ) // most light
    return (Emitter){origin, (float3)(dval.x), 0.1f};
  if ( index == 1 ) // bg light
    return (Emitter){(float3)( 0.6f, 0.0f,-0.6f), (float3)(2.0f), 0.1f};
}
EMITTEREND

UPDATEMAPSTART
void Room ( int avoid, float3 origin, SampledPt* pt, float time, float3 dval ) {
  float dist;
  dist = sdPlane(origin, normalize((float3)(0.0f, 0.0f, 1.0f)), 1.0f);
  MapUnionG(avoid, pt, dist, 1, (float3)(0.2f, 0.3f, 0.9f));
  dist = sdPlane(origin, normalize((float3)(0.0f, 1.0f, 0.0f)), 1.0f);
  MapUnionG(avoid, pt, dist, 1, (float3)(0.2f, 0.3f, 0.2f));
  dist = sdPlane(origin, normalize((float3)(0.0f, 0.0f, -1.0f)), 1.0f);
  MapUnionG(avoid, pt, dist, 1, (float3)(0.2f, 0.9f, 0.2f));
  dist = sdPlane(origin, normalize((float3)(0.0f, -1.0f, 0.0f)), 1.0f);
  MapUnionG(avoid, pt, dist, 1, (float3)(0.9f, 0.3f, 0.2f));
  dist = sdPlane(origin, normalize((float3)(1.0f, 0.0f, 0.0f)), 1.0f);
  MapUnionG(avoid, pt, dist, 1, (float3)(0.2f, 0.9f, 0.9f));
  dist = sdPlane(origin, normalize((float3)(-1.0f, 0.0f, 0.0f)), 1.0f);
  MapUnionG(avoid, pt, dist, 1, (float3)(0.9f, 0.9f, 0.2f));

  // dist = sdLineSegment(origin, (float3)(-25.13f, -19.47f, -27.74f),
  //                              (float3)(0.694059f, 0.371056f, -0.616927f)*200.0f);
  MapUnionG(avoid, pt, dist, 1, (float3)(0.8f, 0.0f, 0.2f));
}

void Panels ( int avoid, float3 origin, SampledPt* pt, float3 dval, float time){
  // weird thing
  float dist, dist2;
  origin += 0.5f*(float3)(cos(time), sin(time), sin(time));
  dist  = sdHexagonCircumcircle(origin, (float2)(0.096f, 0.032f));
  dist2 = sdHexagonCircumcircle(origin, (float2)(0.078f, 0.151f));
  dist = opUnionChamfer(dist, dist2, 0.073f);
  dist2 = sdHexagonCircumcircle(origin, (float2)(0.079f, 0.047f));
  dist = opSubtractRound(dist, dist2, 0.073f + fabs(sin(time))*(-0.01f));
  MapUnionG(avoid, pt, dist, 1, (float3)(0.4f, 0.6f, 0.2f));
}
void Hider ( int avoid, float3 origin, SampledPt* pt, float3 dval, float time){
  // hide light
  origin -= (float3)(-0.938f, 0.813f, 0.777f);
  float dist = sdBox(origin, (float3)(0.396f, 0.36f, 0.023f));
  // MapUnionG(avoid, pt, dist, 1, (float3)(0.4f, 0.6f, 0.2f));
}

void Update_Map ( int avoid, float3 origin, SampledPt* pt, float time,
                  __read_only image2d_array_t textures, float3 dval ) {
  Room(avoid, origin, pt, time, dval);
  Panels(avoid, origin, pt, dval, time);
  Hider(avoid, origin, pt, dval, time);
}
UPDATEMAPEND
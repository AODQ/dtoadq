
MATERIALSSTART
MATERIALSEND

CAMERASTART
void Update_Camera ( Camera* camera, float time ) {
  if ( camera->flags > 0 ) return; // override
}
CAMERAEND

UPDATEMAPSTART
void Primitives ( int avoid, float3 origin, MapInfo* minfo, float time,
                  __read_only image2d_array_t textures ) {
  // origin = fabs(origin+3.0f);
  // origin += 3.0f;
  origin.xz = opRotate(origin.xz, time);
  origin.yx = opRotate(origin.yx, 0.15f*cos(time)*2.2f);
  origin.xz = opMirrorOctant(origin.xz, (float2)(2.0f, 2.0f), 0);
  origin.xz = opRotate(origin.xz, 15.0f);
  origin.xz = opMirrorOctant(origin.xz, (float2)(1.0f, 1.0f), 0);

  float dist =  sdHexPrism(origin, (float2)(0.626f, 0.252f));
  dist = max(dist, -sdSphere(origin, 0.5f));

  float torus = sdTorus82(origin, (float2)(0.6f, 0.2f));
  dist = opUnionRound(dist, torus, 0.1f);

  float3 colour = (float3)(0.8f, 0.6f, 0.2f);
  float2 fpos = fmod(fabs(origin.xy)*64.0f, (float2)(1024.0f));
  MapUnionG(avoid, minfo, dist, 0, colour);
}

void Room ( int avoid, float3 origin, MapInfo* minfo, float time ) {
  origin.y += 3.0f;
  float ht = 63.0f;
  float dist = sdBox(origin, (float3)(ht));
  dist = max(dist, -sdBox(origin, (float3)(ht-0.2f)));
  dist = opUnionRound(dist, sdPlane(origin, (float3)(0.0f, 1.0f, 0.0f), 5.0f), 17.3f);

  origin += 50.0f;
  float3 colour = (float3)(0.2f);
  // colour.z += origin.y/ht;

  origin.xy = opMirrorOctant(origin.xz, (float2)(time, time), 0);
  origin.xy = opMirrorOctant(origin.xy, (float2)(time, time), 0);
  colour.x = smoothstep(0.0f, 1.0f, fmod(floor(origin.x/5.0f), 2.0f));
  colour.y = smoothstep(0.0f, 1.0f, fmod(floor(origin.y/5.0f), 2.0f));
  colour.z = smoothstep(0.0f, 1.0f, fmod(floor(origin.z/5.0f), 2.0f));
  colour = (float3)((float)((int)(colour.x)^(int)(colour.y)^(int)(colour.z)));

  colour.x -= time/5.0f;;
  colour.y -= time/5.0f;;
  colour.z -= time/5.0f;;


  MapUnionG(avoid, minfo, dist, 0, colour);
}

void Walls ( int avoid, float3 origin, MapInfo* minfo, float time ) {
  float dist
       =           sdPlane(origin, (float3)( 0.0f, 1.0f, 0.0f),  5.0f);
  // dist = min(dist, sdPlane(origin, (float3)( 0.0f,-1.0f, 0.0f),  5.0f));
  // dist = min(dist, sdPlane(origin, (float3)( 1.0f, 0.0f, 0.0f),  5.0f));
  // dist = min(dist, sdPlane(origin, (float3)(-1.0f, 0.0f, 0.0f),  5.0f));
  // dist = min(dist, sdPlane(origin, (float3)( 0.0f, 0.0f, 1.0f), 25.0f));
  // dist = min(dist, sdPlane(origin, (float3)( 0.0f, 0.0f,-1.0f),  9.0f));
  if ( dist >=  9.0f ) return;
  float3 colour = (float3)(0.03f, 0.2f, 0.2f);

  float cdist = 2.0f;
  origin += 50.0f;
  colour = (float3)(smoothstep(0.0f, 1.0f, colour.x));
  // colour = (float3)(colour.x);

  MapUnionG(avoid, minfo, dist, 1, colour);
}

void Update_Map ( int avoid, float3 origin, MapInfo* minfo, float time,
                    __read_only image2d_array_t textures, float3 debug_values ) {
  // -- modeling --
  Room(avoid, origin, minfo, time);
  Primitives(avoid, origin, minfo, time, textures);
}
UPDATEMAPEND

POSTPROCESSSTART
float3 Post_Process ( float3 ro, float3 rd, MapInfo info, float time,
                      __read_only image2d_array_t textures ) {
  return info.colour*sin(time);
}
POSTPROCESSEND
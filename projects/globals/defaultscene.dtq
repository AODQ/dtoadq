TEXTURESSTART
TEXTURESEND
MATERIALSSTART
{
  "materials": [
    {
      "diffuse": "0.2", "specular": "0.0",
      "glossy": "0.4",  "retroreflective": "0.0",
      "transmittive": "0.0"
    }, {
      "diffuse": "0.2", "specular": "0.0",
      "glossy": "0.4",  "retroreflective": "0.0",
      "transmittive": "0.0"
    }, {
      "diffuse": "0.2", "specular": "0.0",
      "glossy": "0.4",  "retroreflective": "0.0",
      "transmittive": "0.0"
    }, {
      "diffuse": "0.2", "specular": "0.0",
      "glossy": "0.4",  "retroreflective": "0.0",
      "transmittive": "0.0"
    }
  ]
}
MATERIALSEND

CAMERASTART
void Update_Camera ( Camera* camera, float time ) {
  if ( camera->flags > 0 ) return; // override
  camera->position += (float3)(-2.00f, 5.5f, 48.0f);
}
CAMERAEND

EMITTERSTART
__constant int EMITTER_AMT = 4;
Emitter REmission ( int index ) {
  float fd = (float)(index+1);
  return (Emitter){(float3)(-5.0f + fd*2.0f, -2.0f, 3.5f), fd/4.0f*2.5f, 1.0f/(fd/4.0f)};
}
EMITTEREND

UPDATEMAPSTART
void Primitives ( int avoid, float3 origin, SampledPt* minfo, float time,
                  float3 dval ) {
  float dist;
  float3 colour;
  // Background Box
  dist = sdBox(origin + (float3)( 2.0f, 0.0f, 10.0f),
                        (float3)(2.5f, 3.5f, 3.35f));
  colour = (float3)(0.4f, 0.4f, 0.8f);
  MapUnionG(avoid, minfo, dist, 1, colour);

  // Foreground Box
  dist = sdSphere(origin + (float3)(-5.055f, -3.231f, -1.145f), 2.9f);
  colour = (float3)(0.8f, 0.4f, 0.8f);
  MapUnionG(avoid, minfo, dist, 2, colour);

  dist = sdSphere(origin + (float3)(dval), 2.0f);
  colour = (float3)(0.8f, 0.4f, 0.8f);
  MapUnionG(avoid, minfo, dist, 2, colour);

  // Torus
  origin -= (float3)(5.063f, 2.834f, 2.4f);
  origin.xy = opRotate(origin.xy, time);
  origin.zy = opRotate(origin.zy, 2.434f);
  dist = sdTorus(origin, 0.65f, 4.6f);
  colour = (float3)(1.0f);
  MapUnionG(avoid, minfo, dist, 4, colour);
}

void Room ( int avoid, float3 origin, SampledPt* minfo, float time, float3 dval){
  float dist;
  float3 colour;
  // Right wall
  dist = sdPlane(origin, normalize((float3)(-1.0f, 0.0f, 0.0f)), 10.8f);
  colour = (float3)(0.4f, 0.9f, 0.4f);
  MapUnionG(avoid, minfo, dist, 0, colour);
  // Left wall
  dist = sdBox(origin + (float3)(10.0f, -1.0f, -2.0f),
               (float3)(1.0f, 8.0f, 64.0));
  // dist = opSubtractColumns(dist, // mirror
  //         sdSphere(origin + (float3)(10.5f, -4.0f, -3.0f), 2.4f), 1.0f, 0.2f);
  colour = (float3)(0.9f, 0.4f, 0.4f);
  MapUnionG(avoid, minfo, dist, 0, colour);
  // Lower wall
  dist = sdPlane(origin, normalize((float3)(0.0f, 1.0f, 0.0f)),  3.5f);
  colour = (float3)(0.7f, 0.7f, 0.75f);
  MapUnionG(avoid, minfo, dist, 0, colour);
  // Upper wall
  dist = sdPlane(origin, normalize((float3)(0.0f, -1.0f, 0.0f)),  8.8f);
  colour = (float3)(0.8f, 0.7f, 0.4f);
  MapUnionG(avoid, minfo, dist, 0, colour);
  // Background wall
  dist = sdPlane(origin, normalize((float3)(0.0f, 0.0f, 1.0f)), 16.0f);
  colour = (float3)(0.7f, 0.7f, 0.75f);
  MapUnionG(avoid, minfo, dist, 0, colour);
  // Invisible/behind-camera wall
  dist = sdPlane(origin, normalize((float3)(0.0f, 0.0f, -1.0f)), 62.0f);
  colour = (float3)(0.2f, 0.2f, 0.25f);
  MapUnionG(avoid, minfo, dist, 0, colour);
}

void Update_Map ( int avoid, float3 origin, SampledPt* minfo, float time,
                    __read_only image2d_array_t textures, float3 debug_values ) {
  // -- modeling --
  Room(avoid, origin, minfo, time, debug_values);
  Primitives(avoid, origin, minfo, time, debug_values);
}
UPDATEMAPEND

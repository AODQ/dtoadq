
MATERIALSSTART
MATERIALSEND

CAMERASTART
void Update_Camera ( Camera* camera, float time ) {
  if ( camera->flags > 0 ) return; // override
}
CAMERAEND

UPDATEMAPSTART
void Primitives ( int avoid, float3 origin, MapInfo* minfo, float time ) {
  float dist =  sdSphere(origin + sin(time)*2.5f, 1.0f);

  float3 colour = (float3)(0.8f, 0.6f, 0.2f);
  MapUnionG(avoid, minfo, dist, 0, colour);
}

void Room ( int avoid, float3 origin, MapInfo* minfo, float time ) {
  origin.y += 3.0f;
  float ht = 63.0f;
  float dist = sdBox(origin, (float3)(ht));
  dist = fmax(dist, -sdBox(origin, (float3)(ht-0.2f)));
  dist = fmin(dist, sdPlane(origin, (float3)(0.0f, 1.0f, 0.0f), 5.0f));

  origin += 50.0f;
  float3 colour = (float3)(0.2f);
  // colour.z += origin.y/ht;

  colour.x = smoothstep(0.0f, 1.0f, fmod(floor(origin.x/5.0f), 2.0f));
  colour.y = smoothstep(0.0f, 1.0f, fmod(floor(origin.y/5.0f), 2.0f));
  colour.z = smoothstep(0.0f, 1.0f, fmod(floor(origin.z/5.0f), 2.0f));
  colour = (float3)((float)((int)(colour.x)^(int)(colour.y)^(int)(colour.z)));

  MapUnionG(avoid, minfo, dist, 0, colour);
}

void Update_Map ( int avoid, float3 origin, MapInfo* minfo, float time,
                    __read_only image2d_array_t textures, float3 debug_values ) {
  // -- modeling --
  Room(avoid, origin, minfo, time);
  Primitives(avoid, origin, minfo, time);
}
UPDATEMAPEND

POSTPROCESSSTART
float3 Post_Process ( float3 ro, float3 rd, MapInfo info, float time,
                      __read_only image2d_array_t textures, float3 dval ) {
  return info.colour;
}
POSTPROCESSEND
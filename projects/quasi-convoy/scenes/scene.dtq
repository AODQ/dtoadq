MATERIALSSTART
0 projects/globals/textures/txCheckerboard.txt
MATERIALSEND

CAMERASTART
void Update_Camera ( Camera* camera, float time ) {
  if ( camera->flags > 0 ) return; // override
  camera->position = (float3)(-85.39f, 90.86f, -140.46f);
  camera->lookat = (float3)(-2.55f, 0.31f, -1.0f);
}
CAMERAEND

UPDATEMAPSTART
void Primitives ( int avoid, float3 origin, MapInfo* minfo, float time,
                  __read_only image2d_array_t textures, float3 dval ) {
  float3 ori = origin;
  ori.xz = opRotate(ori.xz, time*1.5f);
  ori.xy = opMirrorOctant(ori.xy, (float2)(1.27f, 1.1f), 0);
  ori.xz = opRotate(ori.xz, time*1.5f);
  float torus = 
    length((float2)(length6(ori.xz) - 2.0f, ori.y)) - 0.5f;

  ori = origin;
  ori.zx = opRotate(ori.zx, time);
  float center = sdHexagonIncircle(ori, (float2)(1.347f, 1.959f));
  ori.x += sin(time)*1.5f;
  ori.y += cos(time);
  center = max(center, sdSphere(ori, 1.5f));


  float dist = min(torus, center);


  float3 colour = (float3)(0.8f, 0.6f, 0.8f);
  MapUnionG(avoid, minfo, dist, 0, colour);

  dist = sdSphere(origin + (float3)(0.0f, -320.0f, 0.0f), 50.0f);
  colour = (float3)(1.0f);
  MapUnionG(avoid, minfo, dist, 1, colour);
}


void NodeSphere ( int avoid, float3 origin, MapInfo* minfo, float time,
                  __read_only image2d_array_t textures, float3 dval ) {
  // -- main sphere --
  float3 ori = origin;
  float mainball;
  mainball = sdSphere(ori, 2.5f);
  { // bump map
    float n = txCells(ori*2.0f)*0.25f;
    ori = origin + (float3)(n);
  }
  mainball = sdSphere(ori, 2.0f);

  // -- eye --
  ori = origin;
  float eye = sdHexagonIncircle(ori+(float3)(-1.568f, -0.563f, -0.033f),
                                (float2)(0.8f, 0.2f));
  mainball = opGroove(mainball, eye, 1.907f, 0.268f);

  // -- shade sphere --
  {
    float dist = mainball;
    float2 img_pos = fmod(fabs(ori.xy)*12.0f, (float2)(1024.0f));
    float4 img = read_imagef(textures, (int4)(img_pos.x, img_pos.y, 0, 0));
    float3 colour = (float3)(0.2f, 0.1f, 0.2f);
    colour.x += (img.x)*0.2f;
    MapUnionG(avoid, minfo, dist, 0, colour);
  }

  // -- shade eye --
  eye = sdBox(ori+(float3)(-1.06f, -0.568f, -0.00f),
                  (float3)(0.161f, 0.504f, 1.082f));
  {
    float dist = eye;
    float3 colour = (float3)(0.8f, 0.1f, 0.8f);
    MapUnionG(avoid, minfo, dist, 0, colour);
  }
}

void FuckingMagnets ( int avoid, float3 origin, MapInfo* minfo, float time,
                    __read_only image2d_array_t textures, float3 dval ) {
}

void Room ( int avoid, float3 origin, MapInfo* minfo, float time,
                    __read_only image2d_array_t textures, float3 dval ) {
  float3 ori = origin;
  ori.xz += (float2)(100.0f, 73.78f);
  ori.y -= 35.0f;
  ori.x = opModInterval1(ori.x, 100.0f, 0.0f, 1.0f, 0);
  ori.z = opModInterval1(ori.z,  70.0f, 0.0f, 3.0f, 0);
  float building = sdBox(ori, (float3)(7.0f, 50.0f, 7.0f));
  building = opUnionChamfer(building, sdBox(ori, (float3)(2.125f, 41.0f, 11.6f)), 2.0f);
  building = opSubtractColumns(building, sdBox(ori, (float3)(8.926f, 32.49f, 3.53f)),
                               0.589f, 2.497f);
  float3 tori = ori;
  ori.y += 36.0f + exp(fabs(sin(time*2.3f)))*3.5f;
  { // bump map
    float n = txCells(ori*0.5f)*0.25f;
    ori = ori + (float3)(n);
  }
  float shaker = sdBox(ori, (float3)(12.0f, 10.3f, 15.8f));
  shaker = opSubtractChamfer(shaker, sdTorus(ori, 3.497f, 27.248f), 12.889f);
  ori = tori;
  float interval;
  ori.y -= 9.0f;
  ori.y += fabs(exp(sin(time)))*3.0f;
  ori.y = opModInterval1(ori.y, 14.0f, 0.0f, 3.0f, &interval);
  interval += 1.0f;
  building = min(building, sdTorus(ori, 0.605f, 15.289f));
  ori.x += sin(time*noise1D(interval))*15.289f;
  ori.z += cos(time*noise1D(interval))*15.289f;
  building = fmax(building, -sdCapsule(ori, 1.924f, 0.109f));


  float dist = min(building, shaker);
  MapUnionG(avoid, minfo, dist, 0, (float3)(0.2f));

  ori = origin;
  dist = sdPlane(ori, (float3)(0.0f, 1.0f, 0.0f), 12.0f);
  MapUnionG(avoid, minfo, dist, 0, (float3)(0.1f, 0.4f, 0.1f));

  // FuckingMagnets(avoid, origin+(float3)(100.0f, -35.0f, 73.78f),
  //               minfo, time, textures, dval);
}

void Update_Map ( int avoid, float3 origin, MapInfo* minfo, float time,
                    __read_only image2d_array_t textures, float3 dval ) {
  // -- modeling --
  Room(avoid, origin, minfo, time, textures, dval);
  Primitives(avoid, origin, minfo, time, textures, dval);
  // NodeSphere(avoid, origin+(float3)(25.0f, 5.0f, 5.0f), minfo, time, textures, dval);
}
UPDATEMAPEND

POSTPROCESSSTART

typedef struct t_Illuminater {
  float3 ro, rd, normal, colour;
  float dist;
} Illuminator;

float3 Phong ( Illuminator i, float3 lo, float3 lc, float3 dval ) {
  float3 ld = normalize((i.ro+i.rd*i.dist) - lo);
  float cosa = pow(0.5f + 0.5f*dot(i.normal, -ld), 4.8f);
  float refl = max(dot(-i.rd, reflect(ld, i.normal)), 0.0f);
  float3 ambient = i.colour;
  float3 diffuse = (float3)(1.369f*cosa);
  float3 specular = (float3)(0.2f + pow(refl, 26.62f));

  return lc*(ambient+diffuse+specular);
}

float3 Post_Process ( float3 ro, float3 rd, MapInfo info, float time,
                      __read_only image2d_array_t textures, float3 dval ) {
  return info.colour;
}
POSTPROCESSEND